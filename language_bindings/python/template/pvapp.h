//***************************************************************************
//                          pvapp.h  -  description
//                             -------------------
//  Template for pvbrowser server using Python
//  generated by     : pvdevelop (C) 2000-2007 by Lehrig Software Engineering
//  email            : lehrig@t-online.de
//***************************************************************************
#ifndef _PVAPP_H_
#define _PVAPP_H_

#include "processviewserver.h"

//*** begin of python definitions *******************************************//
#include "Python.h"                                                          // include python
typedef struct                                                               // 
{                                                                            //
  PyThreadState *thread;                                                     // python thread state
  char          *instance;                                                   // instance name
  PARAM         *p;                                                          // pvbrowser PARAM structure
  PyObject      *pmod, *pclass, *pargs, *pinst, *pmeth, *pres;               // python objects
}pvPyCleanupStruct;                                                          // struct for cleanup
int pvPyRun_SimpleFile(const char *filename);                                // wrapper for running python file
int pvPy_lock(PARAM *p);                                                     // lock python threads
int pvPy_unlock(PARAM *p);                                                   // unlock python threads
int pvPy_cleanup(void *arg);                                                 // cleanup callback function
int pvPy_SetInstance(pvPyCleanupStruct *cleanup_struct, char *instance);     // constructor/destructor
#define PyMethod(method) pvPyCleanupStruct *cs = (pvPyCleanupStruct *) p->app_data; pvPy_lock(p); int  iret; cs->pmeth = PyObject_GetAttrString(cs->pinst, method);
#define PyBuildValue     cs->pargs = Py_BuildValue                           
#define PyReturn         cs->pres = PyEval_CallObject(cs->pmeth, cs->pargs); PyArg_Parse(cs->pres, "i", &iret); Py_DECREF(cs->pmeth); Py_DECREF(cs->pargs); Py_DECREF(cs->pres); pvPy_unlock(p); return iret;
//*** end of python definitions *********************************************//

// todo: comment me out
//#include "rlmodbusclient.h"
//#include "rlsiemenstcpclient.h"
//#include "rlppiclient.h"
//#include "modbusdaemon.h"             // this is generated
//#include "siemensdaemon.h"            // this is generated
//#include "ppidaemon.h"                // this is generated

int show_mask1(PARAM *p);

#endif
